
* New IO
  #+BEGIN_SRC java
    package me.ifjy.niotest;

    import java.io.*;
    import java.nio.*;
    import java.nio.channels.*;
    import java.util.zip.*;

    public class NIOTest
    {
        public static long checksumInputStream(String filename) throws IOException
        {
            InputStream in = new FileInputStream(filename);
            CRC32 crc = new CRC32();

            int c;
            while ((c=in.read()) != -1)
                crc.update(c);
            return crc.getValue();
        }

        public static long checksumBufferedInputStream(String filename) throws IOException
        {
            InputStream in = new BufferedInputStream(new FileInputStream(filename));
            CRC32 crc = new CRC32();

            int c;
            while ((c=in.read()) != -1)
                crc.update(c);
            return crc.getValue();
        }

        public static long checksumRandomAccessFile(String filename) throws IOException
        {
            RandomAccessFile file = new RandomAccessFile(filename, "r");
            long length = file.length();
            CRC32 crc = new CRC32();

            for (long p = 0; p < length; p++) {
                file.seek(p);
                int c = file.readByte();
                crc.update(c);
            }
            return crc.getValue();
        }

        public static long checksumMappedFile(String filename) throws IOException
        {
            FileInputStream in = new FileInputStream(filename);
            FileChannel channel = in.getChannel();

            CRC32 crc = new CRC32();
            int length = (int)channel.size();
            MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_ONLY, 0, length);

            for (int p = 0; p < length; p++) {
                int c = buffer.get(p);
                crc.update(c);
            }
            return crc.getValue();
        }

        public static void main(String[] args) throws IOException
        {
            System.out.println("Input Stream:");
            long start = System.currentTimeMillis();
            long crcValue = checksumInputStream(args[0]);
            long end = System.currentTimeMillis();
            System.out.println(Long.toHexString(crcValue));
            System.out.println((end - start) + " miliseconds");

            System.out.println("Buffered Input Stream:");
            start = System.currentTimeMillis();
            crcValue = checksumBufferedInputStream(args[0]);
            end = System.currentTimeMillis();
            System.out.println(Long.toHexString(crcValue));
            System.out.println((end - start) + " miliseconds");

            System.out.println("Random Access Stream:");
            start = System.currentTimeMillis();
            crcValue = checksumRandomAccessFile(args[0]);
            end = System.currentTimeMillis();
            System.out.println(Long.toHexString(crcValue));
            System.out.println((end - start) + " miliseconds");

            System.out.println("Mapped File:");
            start = System.currentTimeMillis();
            crcValue = checksumMappedFile(args[0]);
            end = System.currentTimeMillis();
            System.out.println(Long.toHexString(crcValue));
            System.out.println((end - start) + " miliseconds");
        }
            
    }
      
  #+END_SRC

* Regex Expression
  #+BEGIN_SRC java
    package me.ifjy.niotest;
    import java.io.*;
    import java.net.*;
    import java.util.regex.*;

    public class HrefMatch
    {
        public static void main(String args[])
        {
            try {
                String urlString;
                if (args.length > 0)
                    urlString = args[0];
                else
                    urlString = "http://java.sun.com";

                InputStreamReader in = new InputStreamReader(new URL(urlString).openStream());
                StringBuilder input = new StringBuilder();
                int ch;
                while ((ch = in.read()) != -1) {
                    input.append((char)ch);
                }

                String patternString = "<a\\s+href\\s*=(\"[^\"]*\"|[^\\s>]*)\\s*>";
                Pattern pattern = Pattern.compile(patternString, Pattern.CASE_INSENSITIVE);
                Matcher matcher = pattern.matcher(input);

                while (matcher.find()) {
                    int start = matcher.start();
                    int end = matcher.end();
                    String match = input.substring(start, end);
                    System.out.println(match);
                }
            } catch (IOException e) {
                e.printStackTrace();
            } catch (PatternSyntaxException e) {
                e.printStackTrace();
            }
                
        }
    }
      
  #+END_SRC
